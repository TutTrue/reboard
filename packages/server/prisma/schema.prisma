// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @unique
  fullName          String
  username          String   @unique
  email             String   @unique
  profilePictureURL String
  createdAt         DateTime @default(now())

  Owns               Board[]      @relation("Owner")
  UserBoards         Board[]
  InvitationFromUser Invitation[] @relation("InvitationFromUser")
  InvitationToUser   Invitation[] @relation("InvitationToUser")
  Task               Task[]
  Action             Action[]
}

model Board {
  id        String   @id @default(uuid())
  name      String
  ownerId   String
  createdAt DateTime @default(now())

  Owner      User   @relation("Owner", fields: [ownerId], references: [id])
  UserBoards User[]
  List       List[]
  Task       Task[]

  @@unique([name, ownerId])
}

model Invitation {
  id         String   @id @default(uuid())
  fromUserId String
  toUserId   String
  accepted   Boolean  @default(false)
  archived   Boolean  @default(false)
  createdAt  DateTime @default(now())

  fromUser User @relation("InvitationFromUser", fields: [fromUserId], references: [id])
  toUser   User @relation("InvitationToUser", fields: [toUserId], references: [id])
}

model List {
  id        String   @id @default(uuid())
  name      String
  boardId   String
  createdAt DateTime @default(now())

  board Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  Task  Task[]
}

model Task {
  id        String   @id @default(uuid())
  text      String
  label     String?
  completed Boolean  @default(false)
  creatorId String
  boardId   String
  listId    String
  createdAt DateTime @default(now())

  creator User  @relation(fields: [creatorId], references: [id])
  list    List  @relation(fields: [listId], references: [id], onDelete: Cascade)
  board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model Action {
  id            String     @id @default(uuid())
  type          ActionType
  takenByUserId String
  createdAt     DateTime   @default(now())

  user User @relation(fields: [takenByUserId], references: [id])
}

enum ActionType {
  CREATE_TASK
  CREATE_LIST
  UPDATE_TASK
  UPDATE_LIST
  DELETE_LIST
  DELETE_TASK
  COMPLETE_TASK
  INVITE_USER
  ACCEPT_INVITATION
}
